//I got a 94% on this. The code failed this: This test case 
//checks that when given starting positions and lengths which 
//would result in part of the ship intersecting another ship 
//your addShip method returns false and does not change the board.

public class Board{

  private String[][] squares;

  public Board()
  {
    squares= new String[10][10];
    for(int i=0; i<squares.length; i++)
    {
      for(int j=0; j<squares[0].length; j++)
      {
        squares[i][j]="- ";
      }
      System.out.print("\n");
    }
  }

  public String toString()
  {
    String board="";
    for(int i=0; i<squares.length; i++)
    {
      for(int j=0; j<squares[0].length; j++)
      {
        board+=squares[i][j];
        board+=" ";
      }
      System.out.print("\n");
    }
    return board;
  }

  public boolean addShip(int row, int col, int len, boolean horizontal)
  {
    if(horizontal==true && col+len<squares.length && col+len>0 && col>=0 && col<10 && row>=0 && row<10 && len>=0) //horizontal and right case
    {
      for(int i=col; i<col+len; i++)
      {
        squares[row][i]="b";
      }
      return true;
    }
    
    if(horizontal==false && row+len<squares.length && row+len>0 && col>=0 && col<10 && row>=0 && row<10 && len>=0) //vertical and down case
    {
      for(int j=row; j<row+len; j++)
      {
        squares[j][col]="b";
      }
      return true;
    }
    
    return false;
  }

  public boolean foundShip(int len)
  {
    //check for a "b" if found look len-1 to the right and down. If all are b values return true even if you find "b" you will eventually find the value which will have the wanted amount either right or down.
    int count=1;
    for(int i=0; i<squares.length; i++)
    {
      for(int j=0; j<squares[0].length; j++)
      {
        if(squares[i][j].equals("b"))
        {
          if(j+(len-1)<10) //make sure the length right in bounds
          {
            for(int k=1; k<len; k++) //look right len-1 because the first "b" we find counts as 1
            {
              if(squares[i][j+k].equals("b")) //start with k=1 so we don't add 0 first
              {
                count++;
              }
              if(count==len)
              {
                return true;
              }
            }
          }
          count=1;
          
          if(i+(len-1)<10) //make sure length down in bounds
          {
            for(int k=1; k<len; k++) //look down
            {
              if(squares[i+k][j].equals("b"))
              {
                count++;
              }
              if(count==len)
              {
                return true;
              }
            }
          }
        }
      }
    }
    return false;
    
  }

  public int shoot(int row, int col)
  {
    if(row<0 || row>10 || col<0 || col>10)
    {
      return -1;
    }
    else
    {
      if(squares[row][col].equals("-"))
      {
        squares[row][col]="m";
        return 0;
      }
      
      else if(squares[row][col].equals("b"))
      {
        squares[row][col]="x";
        return 1;
      }
      
      else if(squares[row][col].equals("x") || squares[row][col].equals("m"))
      {
        return 2;
      }
    }
    return 0;
  }

  public boolean gameOver()
  {
    for(int i=0; i<squares.length; i++)
    {
      for(int j=0; j<squares[0].length; j++)
      {
        if(!(squares[i][j].equals("b")))
        {
          return true;
        }
      }
    }
    return false;
  }

}


import java.util.Scanner;

public class Battleship
{
  public static void main(String[] args)
  {
    // Set up board and print welcome
    Board b = new Board();
    Scanner scan = new Scanner(System.in);
    System.out.println("Welcome to Battleship!\n");
    boolean addNew = true;

    while(addNew)
    {
      System.out.println("Type \"a\" to add new ship, \"b\" to see the board, \"p\" to play or \"q\" to quit.");
      String ans = scan.nextLine();
      if(ans.toLowerCase().equals("q"))
        return;
      if(ans.toLowerCase().equals("a"))
      {
        // Get parameters for new ship
        System.out.println("Starting in which row?");
        int r = scan.nextInt();
        System.out.println("Starting in which column?");
        int c = scan.nextInt();
        System.out.println("How long?");
        int l = scan.nextInt();
        scan.nextLine();
        System.out.println("Horizontal (h) or vertical (v)?");
        String d = scan.nextLine();
        boolean h = (d.toLowerCase().equals("h"));

        // Call addShip method and return message based on true/false value
        if(b.addShip(r, c, l, h))
        {
          System.out.println("\nNew ship added!\n");
        }
        else
          System.out.println("\nCan't put a ship there!\n");
      }
      else if(ans.toLowerCase().equals("b"))
        System.out.println("\n" + b + "\n");
      else if(ans.toLowerCase().equals("p"))
      {
        if(b.foundShip(3) && b.foundShip(4))
        {
          addNew = false;
          System.out.println("\nOk, let's play!\n");
        }
        else
          System.out.println("\nYou need ships of length 3 and 4 to play!\n");
      }
    }

    // As long as ships remain, play game
    while(!b.gameOver())
    {
      System.out.println("Press \"s\" to shoot at a square, \"b\" to see the board, \"q\" to quit.");
      String ans = scan.nextLine();
      if(ans.toLowerCase().equals("q"))
        return;
      else if(ans.toLowerCase().equals("s")){
        // Get row and column to shoot
        System.out.println("Input row.");
        int r = scan.nextInt();
        System.out.println("Input column.");
        int c = scan.nextInt();

        // Perform shot and store result
        int result = b.shoot(r,c);

        // Choose message based on result
        if(result == 1)
          System.out.println("\nHit!\n");
        else if(result == 0)
          System.out.println("\nMiss!\n");
        else if(result == 2)
          System.out.println("\nYou already tried that.\n");
        else if(result == -1)
          System.out.println("\nInvalid coordinates.\n");
        scan.nextLine();
      }
      else if(ans.toLowerCase().equals("b"))
        System.out.println("\n" + b + "\n");
    }
    System.out.println("Game over!");
  }
}

